{"version":3,"sources":["App.js","index.js"],"names":["App","useState","erroGeo","setErroGeo","obtendoGeo","setObtendoGeo","erroClima","setErroClima","obtendoClima","setObtendoClima","cidade","setCidade","clima","setClima","numeroWhats","a","process","urlClima","fetch","then","response","json","data","cod","catch","error","console","message","enviaWhats","mensagem","some","toMatchItem","navigator","userAgent","match","encodeURIComponent","useEffect","apikey","latitude","longitude","url","log","results","components","city","country","geolocation","getCurrentPosition","position","coords","obtemCidade","code","Container","fluid","className","Navbar","bg","Brand","href","Nav","Link","Form","inline","FormControl","type","placeholder","value","onChange","e","target","color","Button","variant","onClick","obtemClima","disabled","length","Alert","onClose","dismissible","Heading","texto","Toast","delay","autohide","Header","Body","Jumbotron","Row","Spinner","animation","Card","name","main","temp","temp_min","temp_max","Img","src","weather","icon","title","description","Title","preventDefault","window","location","Footer","Date","dt","toLocaleString","timeZone","sticky","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51c858e2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Form from 'react-bootstrap/Form'\nimport Alert from 'react-bootstrap/Alert'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Container from 'react-bootstrap/Container'\nimport Toast from 'react-bootstrap/Toast'\nimport Spinner from 'react-bootstrap/Spinner'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport { FaCloudversify, FaSpinner, FaCloudRain, FaArrowDown, FaArrowUp, FaWhatsapp }\n  from \"react-icons/fa\"\n\n\n\n\n/* API Geo Referenciamento\n* https://opencagedata.com/users/sign_up\n* API Fotos\n* https://unsplash.com/oauth/applications\n* \n* https://api.unsplash.com/search/photos?query=Itu&client_id=SuaChave&page=1&w=1500&dpi=2\n*\n* API Weather\nhttps://openweathermap.org/api\n*/\n\nfunction App() {\n  const [erroGeo, setErroGeo] = useState(null)\n  const [obtendoGeo, setObtendoGeo] = useState(false)\n  const [erroClima, setErroClima] = useState(null)\n  const [obtendoClima, setObtendoClima] = useState(false)\n  const [cidade, setCidade] = useState('')\n  const [clima, setClima] = useState(null)\n  const numeroWhats = '5511941366222' //Prefeitura de Itu\n\n\n\n\n  //Fonte: https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError/code\n  const listaErrosGeo = [{ \"codigo\": 1, \"texto\": \"Não foi dada permissão para o sistema poder encontrar a sua localização\" },\n  { \"codigo\": 2, \"texto\": \"Não foi possível obter a sua localização\" },\n  { \"codigo\": 3, \"texto\": \"O tempo para obter a sua localização foi expirado!\" }]\n\n  useEffect(() => {\n\n    const apikey = process.env.REACT_APP_APIKEY\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        //console.log(position)\n        position.coords.latitude && obtemCidade(position.coords.latitude, position.coords.longitude)\n      }, function (error) {\n        //console.log(error)\n        setErroGeo(error.code)\n      })\n    }\n    async function obtemCidade(latitude, longitude) {\n      setObtendoGeo(true)\n      let url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apikey}`\n      await fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data.results[0].components)\n          setCidade(data.results[0].components.city + ', ' + data.results[0].components.country)\n        })\n        .catch(function (error) {\n          console.error('Houve um problema ao efetuar a requisição: ' + error.message);\n        });\n      setObtendoGeo(false)\n    }\n  }, [])\n\n\n  async function obtemClima(cidade) {\n    setObtendoClima(true)\n    const apiweather = process.env.REACT_APP_OPENWEATHER\n    let urlClima = `http://api.openweathermap.org/data/2.5/weather?q=${cidade}&lang=pt&units=metric&appid=${apiweather}`\n    await fetch(urlClima)\n      .then(response => response.json())\n      .then(data => {\n        switch (data.cod) {\n          case '401':\n            setErroClima('A API Key informada é inválida!')\n            setClima(null)\n            break;\n          case '404':\n            setErroClima('Cidade não encontrada')\n            setClima(null)\n            break;\n          case '429':\n            setErroClima('O uso gratuito da API foi excedido! (60 chamadas por minuto)')\n            setClima(null)\n            break;\n          default:\n            setClima(data)\n        }\n      })\n      .catch(function (error) {\n        console.error('Houve um problema ao efetuar a requisição: ' + error.message);\n      });\n    setObtendoClima(false)\n  }\n\n\n  function detectaMobile() {\n    const toMatch = [\n      /Android/i,\n      /webOS/i,\n      /iPhone/i,\n      /iPad/i,\n      /iPod/i,\n      /BlackBerry/i,\n      /Windows Phone/i\n    ];\n\n    return toMatch.some((toMatchItem) => {\n      return navigator.userAgent.match(toMatchItem);\n    });\n  }\n\n  function enviaWhats(mensagem) {\n\n    let target = ''\n    if (detectaMobile()) {\n      // montar o link (número e texto) (app)\n      target = `whatsapp://send?phone=${encodeURIComponent(numeroWhats)}&text=${encodeURIComponent(mensagem)}`\n    } else {\n      // montar o link (número e texto) (web)\n      target = `https://api.whatsapp.com/send?phone=${encodeURIComponent(numeroWhats)}&text=${encodeURIComponent(mensagem)}`\n    }\n    return target\n  }\n\n  return (\n    <Container fluid={true} className=\"p-0\">\n      <Navbar bg=\"primary\">\n        <Navbar.Brand href=\"#home\">FateClima</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Início</Nav.Link>\n          <Nav.Link href=\"#contato\">Contato</Nav.Link>\n        </Nav>\n        <Form inline>\n          <FormControl type=\"text\"\n            placeholder={obtendoGeo ? 'Aguarde, obtendo a cidade...' : 'Informe a cidade'}\n            className=\"sm-3\"\n            value={cidade} onChange={e => setCidade(e.target.value)} />\n                      &nbsp;\n          {obtendoGeo && <FaSpinner className=\"spinner\" color=\"white\" />}\n          <Button variant=\"secondary\" onClick={() => { obtemClima(cidade) }} disabled={!cidade.length > 0}>\n            {obtendoClima ? <FaSpinner className=\"spinner\" color=\"white\" /> : <FaCloudversify color=\"white\" />}\n            &nbsp;Obter Clima</Button>\n        </Form>\n      </Navbar>\n\n      {erroGeo &&\n        <Alert variant=\"danger\" onClose={() => setErroGeo(null)} dismissible>\n          <Alert.Heading>Ops! Ocorreu um erro ao obter a sua localização</Alert.Heading>\n          <p>\n            {listaErrosGeo[erroGeo - 1].texto} <br></br>\n            Digite a <strong>cidade</strong> desejada no campo de busca e clique em Obter Clima.\n          </p>\n        </Alert>\n      }\n      { erroClima &&\n        <Toast onClose={() => setErroClima(null)} delay={4000} autohide className=\"bg-danger\">\n          <Toast.Header>\n            <strong className=\"mr-auto\">Cidade não encontrada!</strong>\n            <small>☹️</small>\n          </Toast.Header>\n          <Toast.Body className=\"bg-white text-danger\">Por favor, faça uma nova busca.</Toast.Body>\n        </Toast>\n      }\n      <Jumbotron className=\"jumbotron-background jumbotron-texto\">\n        <h1><FaCloudRain /> FateClima</h1>\n        <p>\n          Consulte o clima de qualquer cidade do mundo. <br></br>\n          App desenvolvido em ReactJS e integrado com as APIs Opencagedata e OpenWeatherMap\n  </p>\n      </Jumbotron >\n      {obtendoClima &&\n        <Row className=\"justify-content-center\">\n          <Spinner animation=\"border\" variant=\"primary\" />\n        </Row>\n      }\n      {clima &&\n        <Row className=\"justify-content-center\">\n          <Card bg=\"primary\" className=\"cartao text-center\">\n            <Card.Header>\n              <h2>{clima.name}</h2>\n              <h3>{clima.main.temp}&#x2103;</h3> {/*https://www.toptal.com/designers/htmlarrows/symbols/*/}\n              <h5>min: {clima.main.temp_min}&#x2103;<FaArrowDown className=\"text-danger\" /> - máx: {clima.main.temp_max}&#x2103;<FaArrowUp className=\"text-success\" /></h5>\n            </Card.Header>\n            <Card.Body className=\"bg-dark\">\n              <Card.Img src={`http://openweathermap.org/img/wn/${clima.weather[0].icon}@4x.png`} title={clima.weather[0].description} />\n              <h3 className=\"text-light\">{clima.weather[0].description}</h3>\n              <Card.Title className=\"text-light\">Previsão do Tempo</Card.Title>\n              <Button variant=\"success\" onClick={e => {\n                e.preventDefault()\n                window.location.href = enviaWhats(`FateClima informa: A temperatura em *${clima.name}* agora é de ${clima.main.temp}C 🤜🤛`)\n              }}><FaWhatsapp /> Compartilhar</Button>\n            </Card.Body>\n            <Card.Footer className=\"text-light\">Atualizado em: {new Date(clima.dt * 1000).toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}</Card.Footer>\n          </Card>\n        </Row>\n      }\n      <Navbar bg=\"dark\" sticky=\"bottom\" id=\"contato\" className=\"m-1\">\n        <Navbar.Brand href=\"#home\" className=\"text-light\">\n          <FaCloudRain /> FateClima - &copy;\n        </Navbar.Brand>\n      </Navbar>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}